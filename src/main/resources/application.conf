apiName = "Workflow API"

// https://doc.akka.io/docs/akka-http/current/configuration.html
akka = {
  http = {
    server = {
      server-header = "Tmrldt"

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle connection timeouts.
      idle-timeout = "60s"

      # Defines the default time period within which the application has to
      # produce an HttpResponse for any given HttpRequest it received.
      # The timeout begins to run when the *end* of the request has been
      # received, so even potentially long uploads can have a short timeout.
      # Set to `infinite` to completely disable request timeout checking.
      #
      # Make sure this timeout is smaller than the idle-timeout, otherwise,
      # the idle-timeout will kick in first and reset the TCP connection
      # without a response.
      #
      # If this setting is not `infinite` the HTTP server layer attaches a
      # `Timeout-Access` header to the request, which enables programmatic
      # customization of the timeout period and timeout response for each
      # request individually.
      request-timeout = "20s"

      # The time period within which the TCP binding process must be completed.
      bind-timeout = "1s"
    }
    client = {
      user-agent-header = "Tmrldt"

      # The time period within which the TCP connecting process must be completed.
      connecting-timeout = "10s"

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle timeouts.
      idle-timeout = "60s"
    }
    // https://www.gregbeech.com/2018/04/08/akka-http-client-pooling-and-parallelism/
    host-connection-pool = {
      # The maximum number of parallel connections that a connection pool to a
      # single host endpoint is allowed to establish. Must be greater than zero.
      max-connections = 8

      # The minimum number of parallel connections that a pool should keep alive ("hot").
      # If the number of connections is falling below the given threshold, new ones are being spawned.
      # You can use this setting to build a hot pool of "always on" connections.
      # Default is 0, meaning there might be no active connection at given moment.
      # Keep in mind that `min-connections` should be smaller than `max-connections` or equal
      min-connections = 0

      # The maximum number of times failed requests are attempted again,
      # (if the request can be safely retried) before giving up and returning an error.
      # Set to zero to completely disable request retries.
      max-retries = 5

      # The maximum number of open requests accepted into the pool across all
      # materializations of any of its client flows.
      # Protects against (accidentally) overloading a single pool with too many client flow materializations.
      # Note that with N concurrent materializations the max number of open request in the pool
      # will never exceed N * max-connections * pipelining-limit.
      # Must be a power of 2 and > 0!
      max-open-requests = 128

      # The maximum duration for a connection to be kept alive
      # This amount gets modified by a 10 percent fuzzyness to avoid the simultanous reconnections
      # defaults to 'infinite'
      # Note that this is only implemented in the new host connection pool
      max-connection-lifetime = infinite

      # Client-side pipelining is not currently supported. See https://github.com/akka/akka-http/issues/32
      pipelining-limit = 1

      # The minimum duration to backoff new connection attempts after the previous connection attempt failed.
      #
      # The pool uses an exponential randomized backoff scheme. After the first failure, the next attempt will only be
      # tried after a random duration between the base connection backoff and twice the base connection backoff. If that
      # attempt fails as well, the next attempt will be delayed by twice that amount. The total delay is capped using the
      # `max-connection-backoff` setting.
      #
      # The backoff applies for the complete pool. I.e. after one failed connection attempt, further connection attempts
      # to that host will backoff for all connections of the pool. After the service recovered, connections will come out
      # of backoff one by one due to the random extra backoff time. This is to avoid overloading just recently recovered
      # services with new connections ("thundering herd").
      #
      # Example: base-connection-backoff = 100ms, max-connection-backoff = 10 seconds
      #   - After 1st failure, backoff somewhere between 100ms and 200ms
      #   - After 2nd, between  200ms and  400ms
      #   - After 3rd, between  200ms and  400ms
      #   - After 4th, between  400ms and  800ms
      #   - After 5th, between  800ms and 1600ms
      #   - After 6th, between 1600ms and 3200ms
      #   - After 7th, between 3200ms and 6400ms
      #   - After 8th, between 5000ms and 10 seconds (max capped by max-connection-backoff, min by half of that)
      #   - After 9th, etc., stays between 5000ms and 10 seconds
      #
      # This setting only applies to the new pool implementation and is ignored for the legacy one.
      base-connection-backoff = "100ms"

      # Maximum backoff duration between failed connection attempts. For more information see the above comment for the
      # `base-connection-backoff` setting.
      #
      # This setting only applies to the new pool implementation and is ignored for the legacy one.
      max-connection-backoff = "2min"

      # The time after which an idle connection pool (without pending requests)
      # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
      idle-timeout = "30s"

      # The pool implementation to use. Currently supported are:
      #  - legacy: the original 10.0.x pool implementation
      #  - new: the pool implementation that became the default in 10.1.x and will receive fixes and new features
      pool-implementation = new

      # The "new" pool implementation will fail a connection early and clear the slot if a response entity was not
      # subscribed during the given time period after the response was dispatched. In busy systems the timeout might be
      # too tight if a response is not picked up quick enough after it was dispatched by the pool.
      response-entity-subscription-timeout = "1s"

      # Modify this section to tweak client settings only for host connection pools APIs like `Http().superPool` or
      # `Http().singleRequest`.
      client = {
        # no overrides by default, see `akka.http.client` for default values
      }
    }
  }
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "DEBUG"
}

workflow = {
  jwt {
    mailForWebSecret = "kYCkEgIVrw48Rv9afbMpX5smMPCfRHAIwGTlvbSgk2e"
  }
  token = "my-secret-token"
  http = {
    host = "0.0.0.0"
    port = 5001
  }
  postgres = {
    profile = "de.tmrdlt.database.WorkflowPostgresProfile$"
    db = {
      connectionPool = HikariCP
      connectionTimeout = 20000
      driver = org.postgresql.Driver
      numThreads = 2
      maxConnections = 2
      queueSize = 10000

      url = "jdbc:postgresql://localhost:5432/workflowdb"

      user = "dev"
      password = "OurLocalPassword"
    }
  }
}